package com.arrow.pegasus.service;

import java.util.Collections;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import com.arrow.pegasus.CoreAuditLog;
import com.arrow.pegasus.data.AccessKey;
import com.arrow.pegasus.data.AccessPrivilege;
import com.arrow.pegasus.data.AccessPrivilege.AccessLevel;
import com.arrow.pegasus.data.AuditLogBuilder;
import com.arrow.pegasus.data.profile.Application;
import com.arrow.pegasus.data.profile.Gateway;
import com.arrow.pegasus.repo.GatewayRepository;

@Service
public class GatewayService extends BaseServiceAbstract {

	@Autowired
	private GatewayRepository gatewayRepository;

	@Autowired
	private AccessKeyService accessKeyService;

	public GatewayRepository getGatewayRepository() {
		return gatewayRepository;
	}

	public Gateway create(Gateway gateway, String who) {
		Assert.notNull(gateway, "gateway is null");
		Assert.hasLength(who, "who is empty");

		String method = "create";

		Application application = getCoreCacheService().findApplicationById(gateway.getApplicationId());
		Assert.notNull(application, "application not found: " + gateway.getApplicationId());

		gateway = gatewayRepository.doInsert(gateway, who);

		// create ownerKey
		AccessKey ownerAccessKey = accessKeyService.create(application.getCompanyId(), application.getId(),
		        Collections.singletonList(new AccessPrivilege(gateway.getPri(), AccessLevel.OWNER)), who);
		logInfo(method, "created owner accessKey: %s", ownerAccessKey.getId());

		// audit log
		getAuditLogService().save(AuditLogBuilder.create().applicationId(application.getId())
		        .type(CoreAuditLog.Gateway.CreateGateway).productName(application.getRefProduct().getName())
		        .objectId(gateway.getId()).by(who).parameter("type", gateway.getType().toString())
		        .parameter("name", gateway.getName()).parameter("uid", gateway.getUid()));

		return gateway;
	}

	public Gateway update(Gateway gateway, String who) {
		Assert.notNull(gateway, "gateway is null");
		Assert.hasLength(who, "who is empty");

		Application application = getCoreCacheService().findApplicationById(gateway.getApplicationId());
		Assert.notNull(application, "application not found: " + gateway.getApplicationId());

		gateway = gatewayRepository.doSave(gateway, who);
		getCoreCacheService().clearGateway(gateway);

		// audit log
		getAuditLogService().save(AuditLogBuilder.create().applicationId(application.getId())
		        .type(CoreAuditLog.Gateway.UpdateGateway).productName(application.getRefProduct().getName())
		        .objectId(gateway.getId()).by(who).parameter("type", gateway.getType().toString())
		        .parameter("name", gateway.getName()).parameter("uid", gateway.getUid()));

		return gateway;
	}

	public Gateway enable(String gatewayId, String who) {
		return updateEnabled(gatewayId, who, true);
	}

	public Gateway disable(String gatewayId, String who) {
		return updateEnabled(gatewayId, who, false);
	}

	private Gateway updateEnabled(String gatewayId, String who, boolean enabled) {
		Assert.hasLength(gatewayId, "gatewayId is empty");
		Assert.hasLength(who, "who is empty");

		String auditLogType = CoreAuditLog.Gateway.EnableGateway;
		if (!enabled)
			auditLogType = CoreAuditLog.Gateway.DisableGateway;

		Gateway gateway = getCoreCacheService().findGatewayById(gatewayId);
		Assert.notNull(gateway, "gateway not found: " + gatewayId);

		Application application = getCoreCacheService().findApplicationById(gateway.getApplicationId());
		Assert.notNull(application, "application not found: " + gateway.getApplicationId());

		// change enabled
		gateway.setEnabled(enabled);

		// save
		gateway = gatewayRepository.doSave(gateway, who);

		// clear cache
		getCoreCacheService().clearGateway(gateway);

		// audit log
		getAuditLogService().save(AuditLogBuilder.create().applicationId(application.getId()).type(auditLogType)
		        .productName(application.getRefProduct().getName()).objectId(gateway.getId()).by(who)
		        .parameter("type", gateway.getType().toString()).parameter("name", gateway.getName())
		        .parameter("uid", gateway.getUid()));

		return gateway;
	}
}
